//@author: caidi



	/**
	 * origin: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\AddCommand.java
	 */

	private void setTaskDetails(Task task, String[] taskDetails) {
		if (taskDetails[INDICATOR_TASK_NAME] != null) {
			task.setName(taskDetails[INDICATOR_TASK_NAME]);
		}
		if (taskDetails[INDICATOR_START_TIME] != null) {
			task.setStartTime(taskDetails[INDICATOR_START_TIME]);
			task.setEndTime(taskDetails[INDICATOR_END_TIME]);
		}
		if (taskDetails[INDICATOR_DATE] != null) {
			task.setDate(taskDetails[INDICATOR_DATE]);
		}
		if (taskDetails[INDICATOR_STATUS] != null) {
			if (taskDetails[INDICATOR_STATUS].equalsIgnoreCase("done")) {
				task.setIsDone(true);
			}
			else {
				task.setIsDone(false);
			}
		}
		if (taskDetails[INDICATOR_LOCATION] != null) {
			task.setLocation(taskDetails[INDICATOR_LOCATION]);
		}
	}

	// End of segment: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\AddCommand.java





	/**
	 * origin: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\CommandParserTest.java
	 */

import static org.junit.Assert.*;

import org.junit.Test;

public class CommandParserTest {
	private static final int INDICATOR_TASK_NAME = 0;
	private static final int INDICATOR_START_TIME = 1;
	private static final int INDICATOR_END_TIME = 2;
	private static final int INDICATOR_DATE = 3;
	private static final int INDICATOR_LOCATION = 5;
	
	private static final String ERROR_COMMAND_FROM_AND_AT_ARE_MUTUALLY_EXCLUSIVE = "ERROR: Command /from and /at are mutually exclusive.";
	private static final String ERROR_INPUT_DURATION_IS_NOT_VALID = "ERROR: Input duration is not valid.";
	private static final String ERROR_INPUT_DATE_IS_NOT_VALID = "ERROR: Input date is not valid.";
	private static final String ERROR_INPUT_STATUS_IS_NOT_VALID = "ERROR: Input status is not valid.";
	private static final String ERROR_COMMAND_KEYWORD_IS_MISSING = "ERROR: Command keyword is missing.";
	private static final String ERROR_INPUT_COMMAND_IS_NOT_VALID = "ERROR: Input Command is not valid.";
	
	@Test
	public void test() {
		CommandParser parser = new CommandParser();
		userInputWithDurationAndDate(parser);
		userInputWithDate(parser);
		userInputWithDeadlineAndDate(parser);
		userInputWithDateAndLocation(parser);
		userInputWithDurationAndDeadline(parser);
		userInputWithInvalidCommand(parser);
	}
	
	private void userInputWithDurationAndDate(CommandParser parser){
		parser.extractTaskDetailsForAdd("task /from 1010 to 2020 /on 120314");
		assertEquals("task name", "task", parser.taskDetails[INDICATOR_TASK_NAME]);
		assertEquals("starting time", "1010", parser.taskDetails[INDICATOR_START_TIME]);
		assertEquals("ending time", "2020", parser.taskDetails[INDICATOR_END_TIME]);
		assertEquals("date", "120314", parser.taskDetails[INDICATOR_DATE]);
		assertEquals("Error Message", null, parser.invalidFeedBack);
	}
	
	private void userInputWithDate(CommandParser parser){
		parser.extractTaskDetailsForAdd("task /on 120314");
		assertEquals("task name", "task", parser.taskDetails[INDICATOR_TASK_NAME]);
		assertEquals("date", "120314", parser.taskDetails[INDICATOR_DATE]);
		assertEquals("Error Message", null, parser.invalidFeedBack);
	}
	
	private void userInputWithDeadlineAndDate(CommandParser parser){
		parser.extractTaskDetailsForAdd("task /at 1010 /on 120314");
		assertEquals("task name", "task", parser.taskDetails[INDICATOR_TASK_NAME]);
		assertEquals("starting time", "1010", parser.taskDetails[INDICATOR_START_TIME]);
		assertEquals("date", "120314", parser.taskDetails[INDICATOR_DATE]);
		assertEquals("Error Message", null, parser.invalidFeedBack);
	}
	
	private void userInputWithDateAndLocation(CommandParser parser){
		parser.extractTaskDetailsForAdd("task1 /on 120314 /loc soc");
		assertEquals("task name", "task1", parser.taskDetails[INDICATOR_TASK_NAME]);
		assertEquals("date", "120314", parser.taskDetails[INDICATOR_DATE]);
		assertEquals("location", "soc", parser.taskDetails[INDICATOR_LOCATION]);
		assertEquals("Error Message", null, parser.invalidFeedBack);
	}
	
	private void userInputWithDurationAndDeadline(CommandParser parser){
		parser.extractTaskDetailsForAdd("task /from 1010 to 2020 /at 1010");
		assertEquals("Error Message", ERROR_COMMAND_FROM_AND_AT_ARE_MUTUALLY_EXCLUSIVE, parser.invalidFeedBack);
	}
	
	private void userInputWithInvalidCommand(CommandParser parser){
		//invalid duration
		parser.extractTaskDetailsForAdd("task /from 12345 to 123456 /on 120314");
		assertEquals("Error Message", ERROR_INPUT_DURATION_IS_NOT_VALID, parser.invalidFeedBack);
        //invalid date
		parser.extractTaskDetailsForAdd("task /on 1234567");
		assertEquals("Error Message", ERROR_INPUT_DATE_IS_NOT_VALID, parser.invalidFeedBack);
		
		//invalid status
		parser.extractTaskDetailsForAdd("task /mark lalala");
		assertEquals("Error Message", ERROR_INPUT_STATUS_IS_NOT_VALID, parser.invalidFeedBack);

		//command missing
		parser.extractTaskDetailsForAdd("task ////");
		assertEquals("Error Message", ERROR_COMMAND_KEYWORD_IS_MISSING, parser.invalidFeedBack);
        
		//invalid command
		parser.extractTaskDetailsForAdd("task /abc");
		assertEquals("Error Message", ERROR_INPUT_COMMAND_IS_NOT_VALID, parser.invalidFeedBack);
	}
	
	

}

	// End of segment: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\CommandParserTest.java





	/**
	 * origin: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\SearchCommand.java
	 */

import java.util.ArrayList;
import java.util.Collections;

/*
* Command pattern: This is one of the concrete commands.
* 
* Description: This class will handle the search operation.
*/
public class SearchCommand extends DisplayCommand {
	
	private static final String FEEDBACK_SEARCH_RESULTS = "Search results:";
	
	private final static String MESSAGE_NO_SEARCH_RESULTS = "ERROR: No records found!";
	
	public SearchCommand(ArrayList<Task> current) {
		super();
		currentTaskList = current;
	}
	
	//constructor used by junit test for initialisation
	public SearchCommand() {
		super();
	}
	
	@Override
	public void execute(String taskName) {
		Search seeker = new Search(allTasks);
		boolean isSearchingByDate = false;

		taskName = taskName.trim();

		try {
			Integer.parseInt(taskName);
			if (taskName.length() == 6) {
				isSearchingByDate = true;
			}
			else {
				isSearchingByDate = false;
			}
		} catch(NumberFormatException e) {
			isSearchingByDate = false;
		}

		Collections.sort(allTasks);

		if(isSearchingByDate) {
			currentTaskList = seeker.searchByDate(taskName);
		}
		else {
			currentTaskList = seeker.searchByName(taskName);
		}

		if (currentTaskList.size() > 0) {
			formDisplayText(result);
			systemFeedback = FEEDBACK_SEARCH_RESULTS;
		}
		else {
			systemFeedback = MESSAGE_NO_SEARCH_RESULTS;
		}
		result.setSystemFeedback(systemFeedback);
	}
}

	// End of segment: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\SearchCommand.java





	/**
	 * origin: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\Task.java
	 */


/*
 * Command pattern: This is one of the "Receiver" classes.
 */
class Task implements Comparable<Task> {
	private static final String TASK_TYPE_FULL_DAY = "fullDay";
	private static final String TASK_TYPE_NO_SET_TIMING = "noSetTiming";
	
	private String type, name, date, startTime, endTime, location;
	private DateTimeConfiguration dateTimeConfig;
	boolean isDone;
	
	private final static String SPACING = "      ";
	
	public Task() {
		dateTimeConfig = new DateTimeConfiguration();
	}
	
	public Task(Task newTask) {
		setType(newTask.getType());
		setName(newTask.getName());
		setDate(newTask.getDate());
		setStartTime(newTask.getStartTime());
		setEndTime(newTask.getEndTime());
		setLocation(newTask.getLocation());	
		setIsDone(newTask.getIsDone());
		dateTimeConfig = new DateTimeConfiguration();
	}
	
	public Task(String type, String name, String date, String startTime, String endTime, String location, boolean isDone){
		setType(type);
		setName(name);
		setDate(date);
		setStartTime(startTime);
		setEndTime(endTime);
		setLocation(location);
		setIsDone(isDone);
		dateTimeConfig = new DateTimeConfiguration();
	}
	
	public void setType(String type){
		this.type = type;
	}
	
	public void setName(String name){
		name = capitalizeString(name);
		this.name = name;
	}
	
	public void setDate(String date){
		this.date = date;
	}

	public void setStartTime(String startTime){
		this.startTime = startTime;
	}
	
	public void setEndTime(String endTime){
		this.endTime = endTime;
	}

	public void setLocation(String location){
		if (location != null){
			location = capitalizeString(location);
		}
		this.location = location;
	}
	
	// End of segment: C:\Users\Sai Hou\Documents\SAIHOU\CS2103T\cs2103jan2014-w13-4j\src\Task.java





